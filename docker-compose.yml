version: "3.9"

services:
  land_app:
    build: .
    container_name: ardhi_app
    # command: gunicorn land_app.wsgi:application --bind 0.0.0.0:8000
    command: python3 manage.py runserver 0.0.0.0:8000

    #changes are made to source code
    volumes:
      - .:/home/app/web
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    ports:
      - 8000:8000
    expose:
     - 8000
    environment:
      - DEBUG=${DEBUG}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - CELERY_BROKER=${CELERY_BROKER}
      - CELERY_BACKEND=${CELERY_BACKEND}
    restart: "on-failure"
    depends_on:
      - postgres-db
      - redis
    networks:
      - land_app

  postgres-db:
    restart: "on-failure"
    image: kartoza/postgis:12.0
    container_name: PostGIS
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASS=${PG_PASS}
      - POSTGRES_DB=${PG_NAME}
    networks:
      - land_app

  redis:
    restart: always
    container_name: redis_app
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data

  celery:
    restart: always
    container_name: celery_app
    build: .
    command: celery -A app worker -l INFO
    volumes:
      - .:/home/app/web
    environment:
      - DEBUG=${DEBUG}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - CELERY_BROKER=${CELERY_BROKER}
      - CELERY_BACKEND=${CELERY_BACKEND}
    depends_on:
      - postgres-db
      - redis
      - land_app
      - nginx

  nginx:
    restart: always
    depends_on:
      - land_app
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: Nginx
    ports:
      - 1337:80
    networks:
      - land_app

networks:
  land_app:
    driver: bridge

# nginx-proxy:
#   container_name: nginx-proxy
#   build: nginx
#   restart: always
#   ports:
#     - 443:443
#     - 80:80
#   volumes:
#     - static_volume:/home/app/web/static
#     - media_volume:/home/app/web/media
#     - certs:/etc/nginx/certs
#     - html:/usr/share/nginx/html
#     - vhost:/etc/nginx/vhost.d
#     - /var/run/docker.sock:/tmp/docker.sock:ro
#   depends_on:
#     - land_app
# nginx-proxy-letsencrypt:
#   image: jrcs/letsencrypt-nginx-proxy-companion
#   env_file:
#     - .env.staging.proxy-companion
#   volumes:
#     - /var/run/docker.sock:/var/run/docker.sock:ro
#     - certs:/etc/nginx/certs
#     - html:/usr/share/nginx/html
#     - vhost:/etc/nginx/vhost.d
#   depends_on:
#     - nginx-proxy

volumes:
  postgres_data:
  static_volume:
  media_volume:
  redisdata:
  data:
  # certs:
  # html:
  # vhost:


#    qgis-server:
#      # Should use version with utf-8 locale support:
#      image: qgis-server:latest
#      volumes:
#        - REPLACE_WITH_FULL_PATH/data:/data:ro
#      environment:
#        - LANG=en_EN.UTF-8
#        - QGIS_PROJECT_FILE=/data/osm.qgs
#        - QGIS_SERVER_LOG_LEVEL=0  # INFO (log all requests)
#        - DEBUG=1                  # display env before spawning QGIS Server
#        - VIRTUAL_HOST=qgis-server.com
#        - LETSENCRYPT_HOST=qgis-server.com
#        - LETSENCRYPT_EMAIL=youremail@gmail.com
#
#      nginx-web:
#        image: nginx
#        labels:
#          com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
#        container_name: ${NGINX_WEB:-nginx-web}
#        restart: always
#        ports:
#          - "${IP:-0.0.0.0}:${DOCKER_HTTP:-80}:80"
#          - "${IP:-0.0.0.0}:${DOCKER_HTTPS:-443}:443"
#        volumes:
#          - ${NGINX_FILES_PATH:-./data}/conf.d:/etc/nginx/conf.d
#          - ${NGINX_FILES_PATH:-./data}/vhost.d:/etc/nginx/vhost.d
#          - ${NGINX_FILES_PATH:-./data}/html:/usr/share/nginx/html
#          - ${NGINX_FILES_PATH:-./data}/certs:/etc/nginx/certs:ro
#          - ${NGINX_FILES_PATH:-./data}/htpasswd:/etc/nginx/htpasswd:ro
#        logging:
#          driver: ${NGINX_WEB_LOG_DRIVER:-json-file}
#          options:
#            max-size: ${NGINX_WEB_LOG_MAX_SIZE:-4m}
#            max-file: ${NGINX_WEB_LOG_MAX_FILE:-10}
#
#      nginx-gen:
#        image: jwilder/docker-gen
#        command: -notify-sighup ${NGINX_WEB:-nginx-web} -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
#        container_name: ${DOCKER_GEN:-nginx-gen}
#        restart: always
#        volumes:
#          - ${NGINX_FILES_PATH:-./data}/conf.d:/etc/nginx/conf.d
#          - ${NGINX_FILES_PATH:-./data}/vhost.d:/etc/nginx/vhost.d
#          - ${NGINX_FILES_PATH:-./data}/html:/usr/share/nginx/html
#          - ${NGINX_FILES_PATH:-./data}/certs:/etc/nginx/certs:ro
#          - ${NGINX_FILES_PATH:-./data}/htpasswd:/etc/nginx/htpasswd:ro
#          - /var/run/docker.sock:/tmp/docker.sock:ro
#          - ./nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
#        logging:
#          driver: ${NGINX_GEN_LOG_DRIVER:-json-file}
#          options:
#            max-size: ${NGINX_GEN_LOG_MAX_SIZE:-2m}
#            max-file: ${NGINX_GEN_LOG_MAX_FILE:-10}
#
#      nginx-letsencrypt:
#        image: jrcs/letsencrypt-nginx-proxy-companion
#        container_name: ${LETS_ENCRYPT:-nginx-letsencrypt}
#        restart: always
#        volumes:
#          - ${NGINX_FILES_PATH:-./data}/conf.d:/etc/nginx/conf.d
#          - ${NGINX_FILES_PATH:-./data}/vhost.d:/etc/nginx/vhost.d
#          - ${NGINX_FILES_PATH:-./data}/html:/usr/share/nginx/html
#          - ${NGINX_FILES_PATH:-./data}/certs:/etc/nginx/certs:rw
#          - /var/run/docker.sock:/var/run/docker.sock:ro
#        environment:
#          NGINX_DOCKER_GEN_CONTAINER: ${DOCKER_GEN:-nginx-gen}
#          NGINX_PROXY_CONTAINER: ${NGINX_WEB:-nginx-web}
#        logging:
#          driver: ${NGINX_LETSENCRYPT_LOG_DRIVER:-json-file}
#          options:
#            max-size: ${NGINX_LETSENCRYPT_LOG_MAX_SIZE:-2m}
#            max-file: ${NGINX_LETSENCRYPT_LOG_MAX_FILE:-10}
#
#    networks:
#      default:
#        external:
#          name: ${NETWORK:-webproxy}